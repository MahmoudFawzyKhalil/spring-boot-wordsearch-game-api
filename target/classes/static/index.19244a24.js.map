{"mappings":"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","sources":["src/js/grid.js","src/js/script.js"],"sourcesContent":["export class Grid {\r\n  wordSelectMode = false;\r\n  selectedItems = [];\r\n  firstSelectedItem;\r\n  gridArea = null;\r\n  words = [];\r\n  foundWords = [];\r\n  tbl;\r\n  hint = document.querySelector(\".hint\");\r\n  success = document.querySelector(\".success\");\r\n\r\n  getCellsInRange(firstLetter, currentLetter) {\r\n    let cellsInRange = [];\r\n\r\n    // Horizontal\r\n    if (firstLetter.y === currentLetter.y) {\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.x > currentLetter.x)\r\n        [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`\r\n          )\r\n        );\r\n      }\r\n      // Vertical\r\n    } else if (firstLetter.x === currentLetter.x) {\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y > currentLetter.y)\r\n        [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`\r\n          )\r\n        );\r\n      }\r\n      // Diagonal: both x and y increase or decrease together\r\n    } else if (\r\n      currentLetter.x - firstLetter.x ===\r\n      currentLetter.y - firstLetter.y\r\n    ) {\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y > currentLetter.y)\r\n        [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = 0; i <= currentLetter.y - firstLetter.y; i++) {\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`\r\n          )\r\n        );\r\n      }\r\n      // Inverse diagonal: x increases and y decreases or the opposite\r\n    } else if (\r\n      currentLetter.x - firstLetter.x ===\r\n      firstLetter.y - currentLetter.y\r\n    ) {\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y < currentLetter.y)\r\n        [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = 0; i <= currentLetter.x - firstLetter.x; i++) {\r\n        cellsInRange.push(\r\n          this.gridArea.querySelector(\r\n            `td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y - i}\"]`\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    return cellsInRange;\r\n  }\r\n\r\n  // Event Handlers\r\n  downHandler(e) {\r\n    // if (this.clickId !== 0) return;\r\n\r\n    if (!e.target.closest(\"td\")) return;\r\n    if (e.target.classList.contains(\"selected\")) return;\r\n\r\n    this.success.classList.add(\"hidden\");\r\n    // this.wordSelectMode = true;\r\n\r\n    const cell = e.target;\r\n    cell.classList.add(\"selected\");\r\n    const x = +cell.dataset.x;\r\n    const y = +cell.dataset.y;\r\n\r\n    this.firstSelectedItem = { x, y };\r\n\r\n    this.tbl.removeEventListener(\"click\", this.downHandlerBoundThis);\r\n    this.tbl.addEventListener(\"click\", this.moveHandlerBoundThis);\r\n  }\r\n\r\n  moveHandler(e) {\r\n    // if (!this.wordSelectMode) return;\r\n\r\n    // if (this.clickId !== 1) return;\r\n    if (!e.target.closest(\"td\")) return;\r\n    if (e.target.classList.contains(\"selected\")) return;\r\n\r\n    const cell = e.target;\r\n    const x = +cell.dataset.x;\r\n    const y = +cell.dataset.y;\r\n    this.selectedItems.forEach((cell) => cell.classList.remove(\"selected\"));\r\n    this.selectedItems = this.getCellsInRange(this.firstSelectedItem, {\r\n      x,\r\n      y,\r\n    });\r\n    console.log(this.selectedItems);\r\n    this.selectedItems.forEach((cell) => cell.classList.add(\"selected\"));\r\n\r\n    this.hint.classList.remove(\"hidden\");\r\n\r\n    this.tbl.removeEventListener(\"click\", this.moveHandlerBoundThis);\r\n    this.tbl.addEventListener(\"click\", this.upHandlerBoundThis);\r\n  }\r\n\r\n  upHandler(e) {\r\n    // this.wordSelectMode = false;\r\n\r\n    const selectedWord = this.selectedItems.reduce(\r\n      (word, cell) => (word += cell.dataset.letter),\r\n      \"\"\r\n    );\r\n    const reversedSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n    if (this.words.indexOf(selectedWord) !== -1) {\r\n      this.foundWords.push(selectedWord);\r\n      this.selectedItems.forEach((cell) =>\r\n        cell.classList.add(\"selected-correct\")\r\n      );\r\n      this.selectedItems = [];\r\n      this.success.classList.remove(\"hidden\");\r\n    } else if (this.words.indexOf(reversedSelectedWord) !== -1) {\r\n      this.foundWords.push(reversedSelectedWord);\r\n      this.selectedItems.forEach((cell) =>\r\n        cell.classList.add(\"selected-correct\")\r\n      );\r\n      this.selectedItems = [];\r\n      this.success.classList.remove(\"hidden\");\r\n    } else {\r\n      this.selectedItems.forEach((cell) => cell.classList.remove(\"selected\"));\r\n    }\r\n\r\n    this.hint.classList.add(\"hidden\");\r\n\r\n    this.tbl.removeEventListener(\"click\", this.upHandlerBoundThis);\r\n    this.tbl.addEventListener(\"click\", this.downHandlerBoundThis);\r\n  }\r\n\r\n  downHandlerBoundThis = this.downHandler.bind(this);\r\n  moveHandlerBoundThis = this.moveHandler.bind(this);\r\n  upHandlerBoundThis = this.upHandler.bind(this);\r\n\r\n  renderGrid(gridSize, wordSearchArray) {\r\n    // Render grid\r\n    this.gridArea = document.querySelector(\".grid-area\");\r\n    if (this.gridArea.innerHTML !== \"\") this.gridArea.innerHTML = \"\";\r\n    this.tbl = document.createElement(\"table\");\r\n    const tblBody = document.createElement(\"tbody\");\r\n    let index = 0;\r\n    for (let i = 0; i < gridSize; i++) {\r\n      const row = document.createElement(\"tr\");\r\n      for (let j = 0; j < gridSize; j++) {\r\n        const cell = document.createElement(\"td\");\r\n        const letter = wordSearchArray[index++];\r\n        const cellText = document.createTextNode(letter);\r\n        cell.appendChild(cellText);\r\n        cell.setAttribute(\"data-x\", j);\r\n        cell.setAttribute(\"data-y\", i);\r\n        cell.setAttribute(\"data-letter\", letter);\r\n        row.appendChild(cell);\r\n      }\r\n      tblBody.appendChild(row);\r\n    }\r\n    this.tbl.appendChild(tblBody);\r\n    this.gridArea.appendChild(this.tbl);\r\n\r\n    // Attach event handlers\r\n\r\n    this.tbl.addEventListener(\"click\", this.downHandlerBoundThis);\r\n    // tbl.addEventListener(\"mousedown\", downHandlerBoundThis);\r\n    // tbl.addEventListener('touchstart', downHandlerBoundThis, false)\r\n\r\n    // tbl.addEventListener(\"click\", moveHandlerBoundThis);\r\n    // tbl.addEventListener(\"mousemove\", moveHandlerBoundThis);\r\n    // tbl.addEventListener('touchmove', this.moveHandler.bind(this), false)\r\n\r\n    // tbl.addEventListener(\"click\", upHandlerBoundThis);\r\n    // tbl.addEventListener(\"mouseup\", upHandlerBoundThis);\r\n    // tbl.addEventListener('touchend', this.upHandler.bind(this), false)\r\n  }\r\n}\r\n","import { Grid } from \"./grid\";\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\n\r\nsubmitWordBtn.addEventListener('click', async function(){\r\n  const grid = new Grid();\r\n  const commaSeparatedWords = document.querySelector(\".words-input\").value\r\n  const gridSize = document.querySelector(\".grid-size-input\").value\r\n\r\n  if (!commaSeparatedWords || !gridSize) {\r\n    const gridArea = document.querySelector(\".grid-area\");\r\n    gridArea.innerHTML = `<h1 class=\"error\">Please enter comma-separated list of words and a grid size</h1>`;\r\n    return;\r\n  }\r\n\r\n  const wordSearchArray = await fetchGridInfo(gridSize, commaSeparatedWords);\r\n  grid.words = commaSeparatedWords.toUpperCase().split(\",\");\r\n  grid.renderGrid(gridSize, wordSearchArray);\r\n});\r\n\r\nasync function fetchGridInfo(gridSize, commaSeparatedWords){\r\n  const response = await fetch(`http://localhost:8080/wordgrid?gridSize=${gridSize}&wordList=${commaSeparatedWords}`);\r\n  const result = await response.text();\r\n  const resultArr = result.split(\" \").filter(el => el != \"\\r\\n\" && el != \"\");\r\n  return resultArr;\r\n}"],"names":["$b48290dd786c70c9$export$c0beb0283cd0caa9","wordSelectMode","selectedItems","firstSelectedItem","gridArea","words","foundWords","tbl","hint","document","querySelector","success","getCellsInRange","firstLetter","currentLetter","cellsInRange","y","x","i","push","this","downHandler","e","target","closest","classList","contains","add","cell","dataset","removeEventListener","downHandlerBoundThis","addEventListener","moveHandlerBoundThis","moveHandler","forEach","cell1","remove","console","log","upHandlerBoundThis","upHandler","selectedWord","reduce","word","letter","reversedSelectedWord","split","reverse","join","indexOf","bind","renderGrid","gridSize","wordSearchArray","innerHTML","createElement","tblBody","index","row","j","cellText","createTextNode","appendChild","setAttribute","async","grid","commaSeparatedWords","value","response","fetch","result","text","filter","el","$bc2825c42aaa4c73$var$fetchGridInfo","toUpperCase"],"version":3,"file":"index.19244a24.js.map"}