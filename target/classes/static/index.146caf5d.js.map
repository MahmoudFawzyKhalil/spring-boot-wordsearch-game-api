{"mappings":"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","sources":["src/js/grid.js","src/js/script.js"],"sourcesContent":["export class Grid {\r\n  wordSelectMode = false;\r\n  selectedItems = [];\r\n  firstSelectedItem;\r\n  gridArea = null;\r\n  words = [];\r\n  foundWords = [];\r\n\r\n  getCellsInRange(firstLetter, currentLetter){\r\n    let cellsInRange = [];\r\n\r\n    // Horizontal\r\n    if (firstLetter.y === currentLetter.y){\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.x > currentLetter.x) [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n        cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n      }\r\n      // Vertical\r\n    } else if (firstLetter.x === currentLetter.x){\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y > currentLetter.y) [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n        cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\r\n      }\r\n      // Diagonal: both x and y increase or decrease together\r\n    } else if (currentLetter.x - firstLetter.x === currentLetter.y - firstLetter.y){\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y > currentLetter.y) [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = 0; i <= currentLetter.y - firstLetter.y; i++) {\r\n        cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`));\r\n      }\r\n      // Inverse diagonal: x increases and y decreases or the opposite\r\n    } else if (currentLetter.x - firstLetter.x === firstLetter.y - currentLetter.y) {\r\n      if (firstLetter.x === currentLetter.x) return cellsInRange;\r\n      if (firstLetter.y === currentLetter.y) return cellsInRange;\r\n      if (firstLetter.y < currentLetter.y) [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n      for (let i = 0; i <= currentLetter.x - firstLetter.x; i++) {\r\n        cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y - i}\"]`));\r\n      }\r\n    }\r\n\r\n    return cellsInRange;\r\n  }\r\n\r\n  renderGrid(gridSize, wordSearchArray) {\r\n\r\n\r\n    // Render grid\r\n    this.gridArea = document.querySelector(\".grid-area\");\r\n    if (this.gridArea.innerHTML !== \"\") this.gridArea.innerHTML = \"\";\r\n    const tbl = document.createElement(\"table\");\r\n    const tblBody = document.createElement(\"tbody\");\r\n    let index = 0;\r\n    for (let i = 0; i < gridSize; i++) {\r\n      const row = document.createElement('tr');\r\n      for (let j = 0; j < gridSize; j++) {\r\n        const cell = document.createElement('td');\r\n        const letter = wordSearchArray[index++];\r\n        const cellText = document.createTextNode(letter);\r\n        cell.appendChild(cellText);\r\n        cell.setAttribute('data-x', j);\r\n        cell.setAttribute('data-y', i);\r\n        cell.setAttribute('data-letter', letter);\r\n        row.appendChild(cell);\r\n      }\r\n      tblBody.appendChild(row);\r\n    }\r\n    tbl.appendChild(tblBody);\r\n    this.gridArea.appendChild(tbl);\r\n\r\n\r\n    // Add event handlers\r\n    tbl.addEventListener('mousedown', (e) => {\r\n      if (!e.target.closest('td')) return;\r\n      this.wordSelectMode = true;\r\n      const cell = e.target;\r\n      const x = +cell.dataset.x;\r\n      const y = +cell.dataset.y;\r\n\r\n      this.firstSelectedItem = {x, y};\r\n    })\r\n\r\n    tbl.addEventListener('mousemove', (e) => {\r\n      if (this.wordSelectMode){\r\n        if (!e.target.closest('td')) return;\r\n        const cell = e.target;\r\n        const x = +cell.dataset.x;\r\n        const y = +cell.dataset.y;\r\n        this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\r\n        this.selectedItems = this.getCellsInRange(this.firstSelectedItem, {x, y})\r\n        this.selectedItems.forEach(cell => cell.classList.add(\"selected\"))\r\n      }\r\n    })\r\n\r\n    tbl.addEventListener('mouseup', (e) => {\r\n      this.wordSelectMode = false;\r\n      const selectedWord = this.selectedItems.reduce((word, cell) => word += cell.dataset.letter, '');\r\n      const reversedSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n      if (this.words.indexOf(selectedWord) !== -1) {\r\n        this.foundWords.push(selectedWord)\r\n        this.selectedItems = [];\r\n      } else if (this.words.indexOf(reversedSelectedWord) !== -1) {\r\n        this.foundWords.push(reversedSelectedWord)\r\n        this.selectedItems = [];\r\n      } else {\r\n        this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\r\n      }\r\n        \r\n    })\r\n\r\n  }\r\n}\r\n","import { Grid } from \"./grid\";\r\n\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\n\r\nsubmitWordBtn.addEventListener('click', async function(){\r\n  const grid = new Grid();\r\n  const commaSeparatedWords = document.querySelector(\".words-input\").value\r\n  const gridSize = document.querySelector(\".grid-size-input\").value\r\n\r\n  if (!commaSeparatedWords || !gridSize) {\r\n    const gridArea = document.querySelector(\".grid-area\");\r\n    gridArea.innerHTML = `<h1 class=\"error\">Please enter comma-separated list of words and a grid size</h1>`;\r\n    return;\r\n  }\r\n\r\n  const wordSearchArray = await fetchGridInfo(gridSize, commaSeparatedWords);\r\n  grid.words = commaSeparatedWords.toUpperCase().split(\",\");\r\n  grid.renderGrid(gridSize, wordSearchArray);\r\n});\r\n\r\nasync function fetchGridInfo(gridSize, commaSeparatedWords){\r\n  const response = await fetch(`http://localhost:8080/wordgrid?gridSize=${gridSize}&wordList=${commaSeparatedWords}`);\r\n  const result = await response.text();\r\n  const resultArr = result.split(\" \").filter(el => el != \"\\r\\n\" && el != \"\");\r\n  return resultArr;\r\n}"],"names":["$b48290dd786c70c9$export$c0beb0283cd0caa9","wordSelectMode","selectedItems","firstSelectedItem","gridArea","words","foundWords","getCellsInRange","firstLetter","currentLetter","cellsInRange","y","x","i","push","this","querySelector","renderGrid","gridSize","wordSearchArray","document","innerHTML","tbl","createElement","tblBody","index","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","e","target","closest","dataset","forEach","cell1","classList","remove","add","selectedWord","reduce","word","reversedSelectedWord","split","reverse","join","indexOf","async","grid","commaSeparatedWords","value","response","fetch","result","text","filter","el","$bc2825c42aaa4c73$var$fetchGridInfo","toUpperCase"],"version":3,"file":"index.146caf5d.js.map"}